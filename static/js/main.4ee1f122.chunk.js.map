{"version":3,"sources":["api/index.js","views/components/RandNos.js","views/components/CustomModal.js","views/pages/Home.js","routes.js","serviceWorker.js","index.js"],"names":["getRandom","quantity","randNos","index","push","Math","floor","random","getUniqueNos","Object","toConsumableArray","Set","sortAsc","sort","a","b","sortDesc","getMaxNo","getMinNo","generateNos","resp","arr2","uniqueNos","length","newquantity","newRandNos","concatedArr","concat","localStorage","removeItem","setItem","JSON","stringify","RandNos","_ref","height","width","list","ITEMS_COUNT","itemsPerRow","rowCount","ceil","rowRenderer","_ref2","key","style","items","convertedIndex","i","react_default","createElement","reactstrap_es","md","sm","className","es","rowHeight","outline","CustomModal","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","prevState","_this2","closeBtn","onClick","_this$props","modalBody","modalTitle","buttonLabel","onclick","color","isOpen","close","React","Component","App","sortNumbers","_callee","dir","newNos","regenerator_default","wrap","_context","prev","next","abrupt","stop","getMaximumNo","param","maxNo","getMinimumNo","minNo","generateRandomNumbers","arguments","undefined","result","storedNos","parse","getItem","window","innerWidth","screen","_this$state","components_CustomModal","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","components_RandNos","hasNextPage","isNextPageLoading","loadNextPage","Routes","BrowserRouter","Switch","Route","exact","path","component","Home","Boolean","location","hostname","match","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ee1f122.chunk.js","sourcesContent":["const getRandom = quantity => {\n  const randNos = [];\n  for (let index = 0; index < quantity; index++) {\n    randNos.push(Math.floor(100000000 + Math.random() * 900000000));\n  }\n  return randNos;\n};\n\nconst getUniqueNos = randNos => {\n  return [...new Set(randNos)];\n};\n\nexport const concatRandNos = (arr1, arr2) => {\n  return arr1.concat(arr2);\n};\n\nexport const sortAsc = randNos => {\n  return randNos.sort((a, b) => a - b);\n};\n\nexport const sortDesc = randNos => {\n  return randNos.sort((a, b) => b - a);\n};\n\nexport const getMaxNo = randNos => {\n  const sortedArr = sortDesc(randNos);\n  return sortedArr[0];\n};\n\nexport const getMinNo = randNos => {\n  const sortedArr = sortAsc(randNos);\n  return sortedArr[0];\n};\n\nexport const generateNos = quantity => {\n  if (quantity <= 0) {\n    return \"Please enter a positive no\";\n  }\n  if (quantity > 10000) {\n    return \"You can only generate a maximum of 10000 numbers at a time\";\n  }\n  const randNos = getRandom(quantity);\n  const uniqueNos = getUniqueNos(randNos);\n  let resp;\n  do {\n    if (uniqueNos.length === quantity) {\n      resp = uniqueNos;\n    } else {\n      const newquantity = quantity - uniqueNos.length;\n      const newRandNos = getRandom(newquantity);\n      const concatedArr = concatRandNos(uniqueNos, newRandNos);\n      const newUniqueNos = getUniqueNos(concatedArr);\n      resp = newUniqueNos;\n    }\n  } while (resp.length !== quantity);\n  localStorage.removeItem(\"phoneNumbers\");\n  localStorage.setItem(\"phoneNumbers\", JSON.stringify(resp));\n  return resp;\n};\n","import React from \"react\";\nimport { AutoSizer, List } from \"react-virtualized\";\nimport { Row, Col } from \"reactstrap\";\n\nconst RandNos = ({ height, width, list }) => {\n  const ITEMS_COUNT = list.length;\n  const ITEM_SIZE = 200;\n  const itemsPerRow = Math.floor(width / ITEM_SIZE);\n  const rowCount = Math.ceil(ITEMS_COUNT / itemsPerRow);\n\n  const rowRenderer = ({ index, key, style }) => {\n    const items = [];\n    const convertedIndex = index * itemsPerRow;\n    for (let i = convertedIndex; i < convertedIndex + itemsPerRow; i++) {\n      if (i >= list.length) {\n        break;\n      }\n      items.push(\n        <Col md=\"2\" sm=\"12\" className=\"Item\" key={i}>\n          {`(0)${list[i]}`}\n        </Col>\n      );\n    }\n\n    return (\n      <Row key={key} style={style}>\n        {items}\n      </Row>\n    );\n  };\n\n  return (\n    <AutoSizer>\n      {() => {\n        return (\n          <List\n            rowRenderer={rowRenderer}\n            className=\"List\"\n            height={height}\n            rowHeight={50}\n            rowCount={rowCount}\n            width={width}\n            style={{ outline: 0 }}\n          />\n        );\n      }}\n    </AutoSizer>\n  );\n};\n\nexport default RandNos;\n","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nclass CustomModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    const closeBtn = (\n      <button className=\"close\" onClick={this.toggle}>\n        &times;\n      </button>\n    );\n    const {\n      modalBody,\n      modalTitle,\n      buttonLabel,\n      onclick,\n      className\n    } = this.props;\n\n    return (\n      <div>\n        <Button\n          color=\"primary\"\n          className={className}\n          onClick={() => {\n            onclick();\n            this.toggle();\n          }}\n        >\n          {buttonLabel}\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.toggle} close={closeBtn}>\n            {modalTitle}\n          </ModalHeader>\n          <ModalBody>{modalBody}</ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CustomModal;\n","import React, { Component } from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport { generateNos, sortAsc, sortDesc, getMaxNo, getMinNo } from \"../../api\";\nimport RandNos from \"../components/RandNos\";\nimport CustomModal from \"../components/CustomModal\";\nimport \"./home.css\";\n\nclass App extends Component {\n  state = {\n    randNos: [],\n    width: 0\n  };\n\n  componentDidMount() {\n    const storedNos = JSON.parse(localStorage.getItem(\"phoneNumbers\"));\n    if (storedNos) {\n      this.setState({\n        randNos: [...storedNos]\n      });\n    } else {\n      this.generateRandomNumbers();\n    }\n\n    //eslint-disable-next-line\n    const width = window.innerWidth > 0 ? window.innerWidth : screen.width;\n    this.setState({\n      width\n    });\n  }\n\n  sortNumbers = async dir => {\n    const { randNos } = this.state;\n    let newNos;\n    if (dir === \"asc\") {\n      newNos = sortAsc([...randNos]);\n      return this.setState({\n        randNos: newNos\n      });\n    } else {\n      newNos = sortDesc([...randNos]);\n      await this.setState({\n        randNos: newNos\n      });\n    }\n  };\n\n  getMaximumNo = () => {\n    const param = [...this.state.randNos];\n    this.setState({\n      maxNo: getMaxNo(param)\n    });\n  };\n\n  getMinimumNo = () => {\n    const param = [...this.state.randNos];\n    this.setState({\n      minNo: getMinNo(param)\n    });\n  };\n\n  generateRandomNumbers = (quantity = 8000) => {\n    const result = generateNos(quantity);\n    this.setState({\n      randNos: [...result]\n    });\n  };\n\n  render() {\n    const { randNos, width, maxNo, minNo } = this.state;\n    return (\n      <div className=\"pt-4 container\">\n        <Row>\n          <Col md=\"4\">\n            Random Phone Numbers: <b>{randNos.length}</b>\n          </Col>\n          <Col md=\"8\">\n            <Row>\n              <Col md=\"3\">\n                <button\n                  className=\"mr-2 btn btn-primary\"\n                  onClick={() => this.generateRandomNumbers()}\n                >\n                  Re-run\n                </button>\n              </Col>\n              <Col md=\"3\">\n                <CustomModal\n                  buttonLabel=\"Get Max\"\n                  className=\"maxNo\"\n                  onclick={this.getMaximumNo}\n                  modalTitle=\"Maximun Number\"\n                  modalBody={`The maximum phone number is (0)${maxNo}`}\n                />\n              </Col>\n              <Col md=\"3\">\n                <CustomModal\n                  buttonLabel=\"Get Min\"\n                  modalTitle=\"Minimum Number\"\n                  className=\"minNo\"\n                  onclick={this.getMinimumNo}\n                  modalBody={`The minimum phone number is (0)${minNo}`}\n                />\n              </Col>\n              <Col md=\"3\">\n                <span className=\"dropdown\">\n                  <button\n                    className=\"btn btn-primary dropdown-toggle dropdownMenuButton\"\n                    type=\"button\"\n                    id=\"dropdownMenuButton\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                  >\n                    Sort\n                  </button>\n                  <div\n                    className=\"dropdown-menu\"\n                    aria-labelledby=\"dropdownMenuButton\"\n                  >\n                    <button\n                      onClick={() => this.sortNumbers(\"asc\")}\n                      className=\"dropdown-item sortAsc\"\n                    >\n                      ascending\n                    </button>\n                    <button\n                      onClick={() => this.sortNumbers(\"desc\")}\n                      className=\"dropdown-item sortDesc\"\n                    >\n                      descending\n                    </button>\n                  </div>\n                </span>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        <div className=\"mt-3 row\">\n          <RandNos\n            items={randNos}\n            hasNextPage={false}\n            isNextPageLoading={false}\n            list={randNos}\n            height={1000}\n            width={width - 80}\n            loadNextPage={this.generateNos}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"../src/views/pages/Home\";\n\nconst Routes = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-virtualized/styles.css\";\nimport Routes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// Keep this here\n// https://www.randomlists.com/phone-numbers?qty=1000&dup=false\n"],"sourceRoot":""}